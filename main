/*
 * File:   main.c
 * Author: karla
 *
 * Created on 23 de marzo de 2023, 05:50 PM
 */

// PIC16F887 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)


#include <xc.h>
#include <stdint.h>
#include <pic16f887.h>
#include "Libreria.h"


#define _XTAL_FREQ 500000  //frecuencia de 4MHZ

uint8_t Contador;
uint8_t ValPot3;

/////////////////////setup
void setup(void); //prototipo de setut


////Rutina de interrupciones
void __interrupt() isr(void){
    if(PIR1bits.ADIF)
    {
        if (ADCON0bits.CHS==0b0000){
            PWM_config("a", 200);
            PWM_duty("a", 100);
            

         }
        
        else if (ADCON0bits.CHS==0b0001){
            PWM_config("a", 200);
            PWM_duty("a", 100);
        }
        else
            ValPot3=ADRESH; 
        PIR1bits.ADIF=0;
        
    }
    if (INTCONbits.T0IF)
    {
        Contador++;
        PWM_manual(ValPot3, Contador);
    
    }
}
void main (void){
    setup();
    while(1){
        
        if(ADCON0bits.GO==0){
            if(ADCON0bits.CHS==0b0000)
                ADCON0bits.CHS=0b0001;
            else if (ADCON0bits.CHS==0b0001)
                ADCON0bits.CHS = 0b0010;
            else ADCON0bits.CHS= 0b0000;
            
            __delay_us(1000);
            ADCON0bits.GO=1;
            
        }
    }
    return;
}
void setup (void){
    ANSEL=0b00000111;
    ANSELH=0;
    
    TRISA = 0b00000011;
    PORTA=0;
    TRISD=0;
    PORTD=0;
    
    OSCCONbits.IRCF = 0b0111 ; // establecerlo en 4 MHz
    OSCCONbits.SCS = 1; // utilizar oscilador intern
    
     // --------------- Seleccion voltaje referencia --------------- 
    ADCON1bits.VCFG1 = 0; // Voltaje de referencia de 0V
    ADCON1bits.VCFG0 = 0; // Voltaje de referencia de 5V
    
            
    // --------------- justificado izquierda ---------------
    ADCON1bits.ADFM = 0; 
    
    ADCON0bits.ADCS = 0b10; // Fosc/32
    
    // --------------- canales --------------- 
    ADCON0bits.CHS = 0b0000; // seleccionar AN0
    //ADCON0bits.CHS = 0b0001; //
    //--------------- Iniciar el ADC ---------------
    ADCON0bits.ADON = 1;  
    __delay_ms(50);
    
    TRISCbits.TRISC2=1;
    TRISCbits.TRISC1=1;
    
    CCP1CONbits.P1M=0;
    CCP1CONbits.CCP1M=0b1100;
    CCP2CONbits.CCP2M=0b1100;
    
    CCPR1L=0x0F;
    CCP1CONbits.DC1B=0;
    
    CCPR2L=0x0F;
    CCP2CONbits.DC2B1=0;
    CCP2CONbits.DC2B0=0;
    
    // --------------- TMR0 --------------- 
    OPTION_REGbits.T0CS = 0; // utilizar el reloj interno (fosc/4)
    OPTION_REGbits.PSA = 0; // asignar el prescaler a Timer0
    OPTION_REGbits.PS = 0b011; // utilizar prescaler de 256
    TMR0 = 6; ///VALOR INICIAL DEL TMR0
    
    
    PR2=255;
    T2CONbits.T2CKPS = 0b11; //prescalr 16
    T2CONbits.TMR2ON = 1; //encender el tmr2
    PIR1bits.TMR2IF = 0;
    
    while (PIR1bits.TMR2IF == 0);
    PIR1bits.TMR2IF = 0;
    TRISCbits.TRISC2 = 0;
    TRISCbits.TRISC1 = 1;
    
    INTCONbits.GIE = 1; // habilitar interrupciones globales
    INTCONbits.PEIE = 1; // habilitar interrupciones perifericas
    PIE1bits.ADIE = 1; // habilitar interrupciones de ADC
    PIR1bits.ADIF = 0; // limpiar la bandera de interrupcion del ADC
    INTCONbits.TMR0IE = 1 ; 
    INTCONbits.T0IF = 0;
    
    
}
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
